TODO ЗАПУСК ТЕСТОВ:
ключи:
-v или --verbose # Добавляет наименование пройденного теста (вместо символа точки .) и текст PASSED. Использовать всегда
-s или --capture=no # Показывает в консоли вывод print`ов
-k # Поиск теста по указанной подстроке (по наименованию теста и т.д.)
--collect-only # Выводит список найденных тестов не запуская их. Удобно при указании ключа -k
--count 20 # запуск теста 20 раз подряд. Нужно установить pip install pytest-repeat
--reruns=2  # Делаем максимум 2 ре-рана теста в случае его падения.
--last-failed # Запускает только провалившиеся тесты (относительно последнего прогона) еще раз
--capture=no # Чтобы увидеть вывод print() нужно использовать эту опцию, при обычном запуске pytest их не будет видно
--maxfail=2  # Остановка после первых двух упавших тестов

pytest -s -v test_main.py # Запуск всех тестов модуля
pytest -s -v test_one.py test_two.py # Запуск двух файлов
pytest -s -v store/ # Запуск тестов из папки
pytest -s -v test_main.py::test_scenario_1_ff # Запуск конкретного теста
pytest -s -v -k scenario # Запуск тестов содержащих подстроку указанную после -k
pytest -s -v test_classes.py::TestEquality # Запуск тестового класса
pytest -s -v test_classes.py::TestEquality::test_1 # Запуск конкретного метода из тестового класса
pytest -s -v "test_main.py::test_with_function_params[1-first value]" # Запуск теста с конкретными параметрами (1-first value)
pytest --setup-show # Запуск в режиме просмотра SETUP и TEARDOWN, т.е. видим область дейтвия фикстур
pytest --setup-plan # Показывает схему-план запуска SETUP и TEARDOWN БЕЗ запуска самих тестов
pytest -m slow # Запуск тестов только с декоратором @pytest.mark.slow


TODO ПРОСМОТР ВСЕХ СУЩЕСТВУЮЩИХ ФИКСТУР:
pytest --fixtures-per-test # Показывает где и какая фикстура используется в тестах
pytest --fixtures # Показывает список всех фикстур и выводит первую документ-строку по ним (можно использовать с ключем -v, тогда выведет все строки)


TODO ОБЛАСТИ ДЕЙСТВИЯ ФИКСТУР (SCOOPES):
@pytest.fixture(scope="module") # Если не указать значение scope=" ", то по умолчанию принимается значение function

scope='function' # Выполняет setup перед началом каждого теста, а teardown по окончанию каждого теста
scope='class' # Выполняет setup перед началом выполнения ВСЕХ тестов в классе, а teardown по окончанию ПОСЛЕДНЕГО теста в классе
scope='module' # Выполняет setup перед началом выполнения ВСЕХ тестов в конкретном файле, а teardown по окончанию ПОСЛЕДНЕГО теста в файле
scope='package' # Выполняет setup перед началом выполнения ВСЕХ тестов в конкретной директории (папки), а teardown по окончанию ПОСЛЕДНЕГО теста в этой директории
scope='session' # Выполняет setup и teardown ОДИН раз, в начале и конце сессии


TODO АВТОИСПОЛЬЗОВАНИЕ ФИКСТУРЫ (AUTOUSE):
@pytest.fixture(autouse=True) # Фикстура будет использоваться автоматически перед каждым тестом


TODO УКАЗАНИЕ ПРОИЗВОЛЬНОГО НАИМЕНОВАНИЯ ДЛЯ ФАЙЛА С ФИКСТУРАМИ (pytest_plugins):
Фикстуры одного назначения можно поместить в файл db_fixtures.py (не conftest.py!). Для того что бы они были видны в модуле в нем нужно прописать:
pytest_plugins = ['db_fixtures']. По сути файл conftest.py это автоматически подключаемый плагин. Тут мы указываем свой плагин.


TODO НАИМЕНОВАНИЕ ДЛЯ ФИКСТУР (NAME):
@pytest.fixture(name="best_fixture_ever") # Можно задавать наименование для удобства использования
def some_name():
    return 'Bill'
def print_some_name(best_fixture_ever):
    assert best_fixture_ever == 'Bill'


TODO ВСТРОЕННЫЙ ФИКСТУРЫ (BUILTIN FIXTURES):
tmp_path и tmp_path_factory # Для создания временных папок.
У tmp_path - function-scope
У tmp_path_factory - session-scope


TODO ДЕКОРАТОРЫ:
@pytest.mark.run(order=1) # Для указания очередности запуска тестов. Нужно установить pip install pytest-ordering
@pytest.mark.dependency() # Помечаем первый тест. Второй тест помечает @pytest.mark.dependency(depends=["test_1"]), т.е. второй зависит от первого и т.д. Указывает зависимость между тестами. Если test_1 упадет, то test_2 не запустится. Нужно установить pip install pytest-dependency 
@pytest.mark.skip(reason="В разработке") # Тест будет пропущен по указанной причине
@pytest.mark.skipif(condidions,..., reason="причина") # Пропускае тест, если хотя бы одно из условий TRUE
@pytest.mark.xfail # Тест не пойдет в статистику проваленных если завершится со статусом FAILED. Не ожидается, что данный тест
завершится успешно. Если этот тест провалится, то у него будет статус XFAIL, но если он все же пройдет, то статус будет XPASS

@pytest.mark.<custom_name> # Созданный маркер с произвольным именем, помеченные им тесты запускаются с ключем -m custom_name.
Описание кастомных маркеров находится в файле pytest.ini в той же директрии, что и тесты. Таких маркеро может быть несколько у одной функции.
Для запуска можно использовать догические операторы "and", "or", "not": -m "smoke and exeption" или -m "not smoke".
В файле pytest.ini опция --strict-markers отвечает за вывод ошибок ERROR, если кастомный маркер не найдет в файле, рекомендовано включать всегда.

@pytest.mark.usefixtures('fixture_name_1', 'fixture_name_2') # Указываем для класса и фикстуры будет применяться автоматически для каждого
теста этого класса, без их явного указания в параметрах тестовых функций


TODO ТРИ СПОСОБА ПЕРЕДАТЬ ПАРАМЕТРЫ ДЯЛ ТЕСТОВ
1. Через декоратор:
@pytest.mark.parametrize("number, value",
[
    (1, 'первое значение'),
    (2, 'второе значение')
])
2. Через фикстуру:
@pytest.fixture(params=["value_1", "value_2", "value_3"])
def check_urls(request):
    return request.param
3. Через хук:
pytest_generate_tests(metafunc):
    if "start_url" in metafunc.fixturenames:
        metafunc.parametrize("start_url", ["http://ya.ru", "http://rambler.ru", "http://mail.ru"])

Передача параметров между тестами с сипользованием фикстуры:

_____
conftest.py
# Фикстура для передачи данных из теста в тест. В качестве контейнера используется словарь
@pytest.fixture(scope="module")
def context():
    return {}

test_main.py
def test_1(context):
    def get_dkp_number(context):
        dkp_number = driver.find_to_be_clickable(*CosPageLocators.NUMBER_OF_DKP).text
    	context['dkp_number'] = dkp_number

def test_2(context):
    dkp_number = context.get('dkp_number')
    driver.find_to_be_clickable(By.XPATH, f'//a[text()="{dkp_number}"]').click()
_____
